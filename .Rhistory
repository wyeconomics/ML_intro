import pandas as pd
import seaborn as sns
from sklearn.tree import DecisionTreeClassifier
df = sns.load_dataset('titanic')
df = df[['survived', 'pclass', 'sex', 'age', 'sibsp', 'parch', 'embarked']]
# Dropping obs with NAs in age
df = df.dropna(subset = ['age'], axis = 0)
# Replacing obs with NAs in embarked with the mode value
temp = df['embarked'].value_counts(dropna= True).idxmax()
print(temp)
temp = df['embarked'].fillna(temp)
df['embarked'] = temp
print(df)
X = df[['pclass', 'age', 'sibsp', 'parch', 'sex', 'embarked']]
y = df[['survived']]
X_train, X_test, y_train, y_test = train_test_split(df)
from sklearn.model_selection import train_test_split
X = df[['pclass', 'age', 'sibsp', 'parch', 'sex', 'embarked']]
y = df[['survived']]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 10, stratify = y)
?DecisionTreeClassifier
?RandomSplit
?RandomState
decision_tree.fit(X_train, y_train)
decision_tree = DecisionTreeClassifier(max_depth=2, random_state=1)
# Fit decision_tree to the training data
decision_tree.fit(X_train, y_train)
df
df[['embarked']]
df[['embarked']].info()
df[['embarked']].nunique()
sex = df[['sex']]
embarked = df[['embarked']]
sex_encoded = encoder.fit_transform([x[0] for x in sex]).reshape(-1, 1)
from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
sex_encoded = encoder.fit_transform([x[0] for x in sex]).reshape(-1, 1)
sex_encoded
from sklearn.preprocessing import LabelEncoder
# Automatically encode all object (categorical) columns
categorical_columns = df.select_dtypes(include=['object']).columns
label_encoders = {}
for column in categorical_columns:
le = LabelEncoder()
df[column] = le.fit_transform(df[column])
label_encoders[column] = le
print(df)
df
label_encoders
label_encoders.values()
label_encoders['sex']
label_encoders['sex'].classes_
print(label_encoders['sex'].classes_)
from sklearn.preprocessing import LabelEncoder
# Automatically encode all object (categorical) columns
categorical_columns = df.select_dtypes(include=['object']).columns
label_encoders = {}
for column in categorical_columns:
le = LabelEncoder()
df[column] = le.fit_transform(df[column])
label_encoders[column] = le
print(df)
# You can check, for example, how the variable sex is encoded with the .classes_ method of label_encoders['sex'] object
print(label_encoders['sex'].classes_) # female: 0, male: 1
import pandas as pd
import seaborn as sns
from sklearn.tree import DecisionTreeClassifier
df = sns.load_dataset('titanic')
df = df[['survived', 'pclass', 'sex', 'age', 'sibsp', 'parch', 'embarked']]
# Dropping obs with NAs in age
df = df.dropna(subset = ['age'], axis = 0)
# Replacing obs with NAs in embarked with the mode value
temp = df['embarked'].value_counts(dropna= True).idxmax()
print(temp)
temp = df['embarked'].fillna(temp)
df['embarked'] = temp
print(df)
from sklearn.preprocessing import LabelEncoder
# Automatically encode all object (categorical) columns
categorical_columns = df.select_dtypes(include=['object']).columns
label_encoders = {}
for column in categorical_columns:
le = LabelEncoder()
df[column] = le.fit_transform(df[column])
label_encoders[column] = le
print(df)
# You can check, for example, how the variable sex is encoded with the .classes_ method of label_encoders['sex'] object
print(label_encoders['sex'].classes_) # female: 0, male: 1
from sklearn.model_selection import train_test_split
X = df[['pclass', 'age', 'sibsp', 'parch', 'sex', 'embarked']]
y = df[['survived']]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 10, stratify = y)
# Instantiate decision_tree
decision_tree = DecisionTreeClassifier(max_depth=2, random_state=1)
# Fit decision_tree to the training data
decision_tree.fit(X_train, y_train)
$$
